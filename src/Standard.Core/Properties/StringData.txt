Err_ExpectEnumType = Expects a value of type "System.Enum" or an object that inherits from type "System.Enum": {0}
BufferTooSmall = The operation has failed because the buffer size is too small.
Err_RequireGeZero = Expects a value that is greater than or equal to zero.
Err_RequireGtZero = Expects a value that is greater than zero.
SequenceIsEmpty = The source sequence is empty.
NoItemSatisfyPredicate = No element satisfies the condition in predicate.
RadixOutOfRange = The radix must be greater than or equal to 2 and less than or equal to {0}.
InvalidCharForNumeralSystem = Invalid character in the supplied numeral system number.
ExtraNonParsableChar = Additional non-parsable characters supplied.
CyclicOrMissingDependecy = Cyclic dependency or missing dependency.
BadBase16Length = String representation of hexadecimal value must have an even number of digits.
GuidEmptyString = GUID cannot be an empty string.
InvalidGuidFormatChar = Format string accepts the following values only: "D", "d", "N", "n", "P", "p", "B", "b", "X" and "x".
BadBase85LineLength = Expects a positive integer, or specify 0 for an unbroken line.
BadBase85PrefixSuffix = ASCII85 encoded data should begin with "{0}" and end with "{1}".
Base85CannotHaveZ = The character "z" is invalid inside an ASCII85 block.
BadBase85Char = Illegal character "{0}" found. ASCII85 only allows characters "!" to "u" on the ASCII chart.
BadBase85EndBlock = The last block of ASCII85 data cannot be a single byte.
UnsupportedFormatSpecifier = The requested standard format specifier is not supported on the current platform: {0}
ArgumentIsEmptyString = Parameter value cannot be an empty string: {0}
InvalidDateTimeStylesCombo = The "DateTimeStyles" enum has an invalid flag combination: "{0}" and "{1}" are mutually exclusive and should not be specified together.
EpochTimeCannotStartWithPlus = An Unix epoch time format cannot start with the "+" character.
IsoDateExpectNumberAfterDot = ISO8601 time format express milliseconds as integers after a dot character (e.g. 2015-07-31T12:43.124Z). The value specified did not have any integers after the dot character: {0}
IsoDateExpectContainPlusMinus = ISO8601 time format express local time by ending with the plus ("+") or minus ("-") character followed by 4 digits representing the time zone. The value specified did not contain any "+" or "-" character: {0}
IsoDateExpectEndWithZ = ISO8601 time format express UTC time by ending with the "Z" character. The value specified did not end with the "Z" character: {0}
IsoDateExpectNotBothPlusMinus = ISO8601 time format express local time by ending with the plus ("+") or minus ("-") character followed by 4 digits representing the time zone. The value specified contains both the "+" and "-" characters: {0}
Err_CollectionsNotContainsKey = The key-value pair collection is expected to contain a member with key "{0}", but such key cannot be found.
Err_BooleanNotTrue = Expects a boolean value that evaluates to "true", but the result is "false" instead.
Err_BooleanNotTrueParams = The parameter "{0}" is expected to be a boolean value that is "true", but such value is "false" instead.
Err_BooleanNotFalse = Expects a boolean value that evaluates to "false", but the result is "true" instead.
Err_BooleanNotFalseParams = The parameter "{0}" is expected to be a boolean value that is "false", but such value is "true" instead.
Err_IsDefaultValue = The variable referenced is in an uninitialized state. Ensure that it is not in the default state and try again.
Err_BadTypeAssignment = Type "{0}" is not assignable to the target, which is of type "{1}".
Err_BadTypeAssignmentParams = Type "{0}" for parameter "{1}" is not assignable to the target, which is of type "{2}".
Err_NumberNotEqual = Expects the numerical value {0}, but the actual value is {1}.
Err_NumberEqual = Expects a numerical value that is not equal to {0}.
Err_NumberNotGe = Expects a numerical value that is greater than or equals to {0}, but the actual value is {1}.
Err_NumberNotGt = Expects a numerical value that is greater than {0}, but the actual value is {1}.
Err_NumberNotLe = Expects a numerical value that is less than or equals to {0}, but the actual value is {1}.
Err_NumberNotLt = Expects a numerical value that is less than {0}, but the actual value is {1}.
Err_MinGtMax = The miniumum value {0} cannot be larger or equal to the maximum value {1}.
Err_NumberNotBetween = Expects a numerical value that is more than or equals to {0} and less than or equals to {1}. The actual value is {2}.
Err_StringIsNull = Expects a string value that is not null (or "Nothing" in Visual Basic).
Err_StringIsNullOrEmpty = Expects a string value that is not null or empty (a string is empty if it has a length of zero).
Err_StringIsEmpty = Expects a string value that is not empty (a string is empty if it has a length of zero).
Err_StringIsNullOrWhiteSpace = Expects a string value that is not null or contains whitespace characters only.
Err_StringIsNullLengthRangeMismatch = Expects a string value with minumum length of {0} and maximum length of {1}. The value is null.
Err_StringLengthRangeMismatch = Expects a string value with have minumum length of {0} and maximum length of {1}. The value has a length of {2}.
Err_StringEqual = Value cannot be "{0}": {1}
Err_StringNotEqual = Expects a string of value "{0}": {1}
Err_StringRegexMismatch = The string value "{0}" does not match the regular expression specified: {1}
Err_StringIsNullRegexMismatch = The string value does not match the regular expression specified because it is null: {0}
Err_StringExceedLength = Expects a string value with maximum length of {0}. The value specified has a length of {1}.
Err_StringIsNullRequireLength = Expects a string value with minimum length of {0}. The value specified is null.
Err_StringRequireLength = Expects a string value with minimum length of {0}. The value specified has a length of {1}.
Err_StringIsNullLengthMismatch = Expects a string value with length of {0}. The value specified is null.
Err_StringLengthMismatch = Expects a string value with length of {0}. The value specified has a length of {1}.
Err_CollectionLengthMismatch = Expects {0} item(s) in the collection that satisfies the requested predicate, but found {1}.
Err_CollectionRequireLength = Expects at least {0} item(s) in the collection that satisfies the requested predicate, but found {1}.
Err_CollectionExceedLength = Expects a maximum of {0} item(s) in the collection that satisfies the requested predicate, but found {1}.
Err_CollectionLengthRangeMismatch = Expects a range of {0} to {1} item(s) in the collection that satisfies the requested predicate, but found {2}.
Err_CollectionIsEmpty = The collection is empty. Expects at least one item.
Err_CollectionPredicateFailure = An item in the collection does not satisfy the predicate test specified.
Err_CollectionPredicateFailureAny = No item in the collection satisfies the predicate test specified.
Err_ExpectPositiveInteger = Expects an integer value that is larger than zero.
Err_StringIsNullWildcardMismatch = The string values does not match the wildcard pattern specified because it is null (or "Nothing" in Visual Basic).
Err_WildcardMismatch = The string value "{0}" does not match the wildcard pattern specified: {1}
Err_InvalidOffsetLength = The number of elements in the collection is less than the sum of the offset and count.
Err_ArrayIsNull = Expects an array that is not null (not "Nothing" in Visual Basic).
EnumeratorNotStarted = An internal error has occured: attempting to enumerate before the emumerator has started.
EnumeratorEnded = An internal error has occured: the enumerator has already finished all operations.
