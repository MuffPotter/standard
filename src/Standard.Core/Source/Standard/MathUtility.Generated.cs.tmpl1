{{- 
br_line = '^n^t^t'
br_line_end = '^n^t'

primitives = {
	"double"  : "double-precision floating-point numbers",
	"float"   : "single-precision floating-point numbers",
	"decimal" : "decimal numbers",
	"ulong"   : "64-bit unsigned integers",
	"long"    : "64-bit signed integers",
	"uint"    : "32-bit unsigned integers",
	"int"     : "32-bit signed integers",
	"ushort"  : "16-bit unsigned integers",
	"short"   : "16-bit signed integers",
	"byte"    : "8-bit unsigned integers",
	"sbyte"   : "8-bit signed integers"
}
-}}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;

namespace Standard
{
	public static partial class MathUtility
	{
{{- 
	for primitive_type in (primitives | object.keys)
-}}
		{{- for.first | string.bool br_line (br_line * 2) -}}

		/// <summary>
		/// Returns the smallest of three {{ primitives[primitive_type] }}.
		/// </summary>
		[CLSCompliant({{ ((primitive_type == 'sbyte') || ((primitive_type | string.slice 0 1) == 'u')) | string.bool 'false' 'true' }})]
		public static {{ primitive_type }} Min({{ primitive_type }} val1, {{ primitive_type }} val2, {{ primitive_type }} val3)
		{
			return Math.Min(val1, Math.Min(val2, val3));
		}

		/// <summary>
		/// Returns the smallest of a list of {{ primitives[primitive_type] }}.
		/// </summary>
		[CLSCompliant({{ ((primitive_type == 'sbyte') || ((primitive_type | string.slice 0 1) == 'u')) | string.bool 'false' 'true' }})]
		public static {{ primitive_type }} Min({{ primitive_type }} val1, {{ primitive_type }} val2, params {{ primitive_type }}[] vals)
		{
			return Math.Min(val1, Math.Min(val2, Enumerable.Min(vals)));
		}

		/// <summary>
		/// Returns the largest of three {{ primitives[primitive_type] }}.
		/// </summary>
		[CLSCompliant({{ ((primitive_type == 'sbyte') || ((primitive_type | string.slice 0 1) == 'u')) | string.bool 'false' 'true' }})]
		public static {{ primitive_type }} Max({{ primitive_type }} val1, {{ primitive_type }} val2, {{ primitive_type }} val3)
		{
			return Math.Max(val1, Math.Max(val2, val3));
		}

		/// <summary>
		/// Returns the largest of a list of {{ primitives[primitive_type] }}.
		/// </summary>
		[CLSCompliant({{ ((primitive_type == 'sbyte') || ((primitive_type | string.slice 0 1) == 'u')) | string.bool 'false' 'true' }})]
		public static {{ primitive_type }} Max({{ primitive_type }} val1, {{ primitive_type }} val2, params {{ primitive_type }}[] vals)
		{
			return Math.Max(val1, Math.Max(val2, Enumerable.Max(vals)));
		}
{{- 
	end
-}}
		{{- br_line_end -}}
	}
}
