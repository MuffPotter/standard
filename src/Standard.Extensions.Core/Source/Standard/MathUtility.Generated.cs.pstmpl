{{- 
$primitiveNums = @{
	'double'  = 'double-precision floating-point numbers'
	'float'   = 'single-precision floating-point numbers'
	'decimal' = 'decimal numbers'
	'ulong'   = '64-bit unsigned integers'
	'long'    = '64-bit signed integers'
	'uint'    = '32-bit unsigned integers'
	'int'     = '32-bit signed integers'
	'ushort'  = '16-bit unsigned integers'
	'short'   = '16-bit signed integers'
	'byte'    = '8-bit unsigned integers'
	'sbyte'   = '8-bit signed integers'
}
 -}}
using System;
using System.Linq;

namespace Standard
{
	public static partial class MathUtility
	{
{{ $primitiveNums | array | % { }}
		/// <summary>
		/// Returns the smallest of three {{ $_.value }}.
		/// </summary>
		[CLSCompliant({{ if (($_.name.StartsWith('u')) -or ($_.name -eq 'sbyte')) { 'false' } else { 'true' } }})]
		public static {{ $_.name }} Min({{ $_.name }} val1, {{ $_.name }} val2, {{ $_.name }} val3)
		{
			return Math.Min(val1, Math.Min(val2, val3));
		}

		/// <summary>
		/// Returns the smallest of a list of {{ $_.value }}.
		/// </summary>
		[CLSCompliant({{ if (($_.name.StartsWith('u')) -or ($_.name -eq 'sbyte')) { 'false' } else { 'true' } }})]
		public static {{ $_.name }} Min({{ $_.name }} val1, {{ $_.name }} val2, params {{ $_.name }}[] vals)
		{
			return Math.Min(val1, Math.Min(val2, Enumerable.Min(vals)));
		}

		/// <summary>
		/// Returns the largest of three {{ $_.value }}.
		/// </summary>
		[CLSCompliant({{ if (($_.name.StartsWith('u')) -or ($_.name -eq 'sbyte')) { 'false' } else { 'true' } }})]
		public static {{ $_.name }} Max({{ $_.name }} val1, {{ $_.name }} val2, {{ $_.name }} val3)
		{
			return Math.Max(val1, Math.Max(val2, val3));
		}

		/// <summary>
		/// Returns the largest of a list of {{ $_.value }}.
		/// </summary>
		[CLSCompliant({{ if (($_.name.StartsWith('u')) -or ($_.name -eq 'sbyte')) { 'false' } else { 'true' } }})]
		public static {{ $_.name }} Max({{ $_.name }} val1, {{ $_.name }} val2, params {{ $_.name }}[] vals)
		{
			return Math.Max(val1, Math.Max(val2, Enumerable.Max(vals)));
		}
{{ } }}
	}
}
